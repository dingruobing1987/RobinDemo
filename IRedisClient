

package com.huawei.it.sctes.server.redis.client;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.poi.ss.formula.functions.T;

import redis.clients.jedis.BinaryClient.LIST_POSITION;

import com.huawei.it.sctes.server.redis.RedisInfoVO;

/**
 * <redis客户端接口>
 * 
 * @author sWX216762
 * @see <相关的类或者类的某个方法>
 */
public interface IRedisClient
{
    /**
     * 保存简单的 字符串类型 key vlaue 数据
     * 
     * @param key
     * @param value
     * @return String 返回 字符串 “OK” 表示成功，否则为失败
     */
    String setString( String key, String value );

    /**
     * 保存简单的 字符串类型 key vlaue 数据，可以设置key的有效时间
     * 
     * @param key
     * @param seconds
     *            以秒为单位
     * @param value
     * @return String 返回 字符串 “OK” 表示成功，否则为失败
     */
    String setString( String key, int seconds, String value );

    /**
     * 获取String值
     * 
     * @param key
     * @return value
     */
    String getString( String key );

    /**
     * 批量保存保存简单的 字符串类型 key vlaue 数据<br>
     * <br>
     * 使用该方法对key的定以有一定要求，key中必须使用 hash tags
     * 来指定是数据同一类数据，这样redis才会把这一批数据存放在同一个节点上，<BR>
     * 设置规则如：userid1{userid}:u1,userid1{userid}:u2,... 用 {userid} 来指定是同一类数据，<BR>
     * redis只计算从第一次出现{，到第一次出现}的substring的hash值<BR>
     * 
     * @param keysvalues
     *            map中的key就redis中存储的key,
     * @return
     */
    String setStrings( Map<String, String> keysvalues );

    /**
     * 获取多个key的值
     * 
     * @param keys
     * @return
     */
    List<String> getStrings( String... keys );

    /**
     * 创建List集合，并初始化数据
     * 
     * @param key
     * @param list
     */
    long setList( String key, List<String> list );

    /**
     * 创建List集合，并初始化数据，可以是设置key的失效时间
     * 
     * @param key
     * @param seconds
     *            时间时间，单位：秒
     * @param list
     * @return long
     */
    long setList( String key, int seconds, List<String> list );

    /**
     * 获取指定范围的List集合数据
     * 
     * @param key
     * @param start
     * @param end
     * @return
     */
    List<String> getList( String key, long start, long end );

    /**
     * 获取指定key的list集合
     * 
     * @param key
     * @return key中对应的list集合全集
     */
    List<String> getList( String key );

    /**
     * 获取指定key的list集合指定开始索引位置后的所有数据
     * 
     * @param key
     * @param start
     *            开始索引位置
     * @return
     */
    List<String> getList( String key, long start );

    /**
     * 根据参数 count 的值，移除列表中与参数 value 相等的元素。<br>
     * <br>
     * count 的值可以是以下几种：<br>
     * count > 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。<br>
     * count < 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。<br>
     * count = 0 : 移除表中所有与 value 相等的值。<br>
     * 
     * @param key
     * @param count
     * @param value
     * @return 被移除元素的数量。
     */
    long removeList( String key, int count, String value );

    /**
     * 移除并返回列表 key 的头元素。
     * 
     * @param key
     * @return 列表的头元素。 当 key 不存在时，返回 nil 。
     */
    String lpop( String key );

    /**
     * BLPOP 是列表的阻塞式(blocking)弹出原语。<br>
     * <br>
     * 它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止。<br>
     * 当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。<br>
     * 如果所有给定 key 都不存在或包含空列表，那么 BLPOP 命令将阻塞连接，直到等待超时，或有另一个客户端对给定 key 的任意一个执行
     * LPUSH 或 RPUSH 命令为止。<br>
     * 超时参数 timeout 接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely)
     * 。<br>
     * 
     * @param timeout
     * @param keys
     * @return 假如在指定时间内没有任何元素被弹出，则返回 [] 空数组。 否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key
     *         ，第二个元素是被弹出元素的值。
     */
    List<String> blpop( int timeout, String... keys );

    /**
     * 移除并返回列表 key 的尾元素。
     * 
     * @param key
     * @return 列表的尾元素。 当 key 不存在时，返回 nil 。
     */
    String rpop( String key );

    /**
     * BRPOP 是列表的阻塞式(blocking)弹出原语。<br>
     * <br>
     * 它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止。<br>
     * 当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的尾部元素。<br>
     * 关于阻塞操作的更多信息，请查看 BLPOP 命令， BRPOP 除了弹出元素的位置和 BLPOP 不同之外，其他表现一致。<br>
     * 
     * @param timeout
     * @param keys
     * @return 假如在指定时间内没有任何元素被弹出，则返回 [] 空数组。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key
     *         ，第二个元素是被弹出元素的值。
     */
    List<String> brpop( int timeout, String... keys );

    /**
     * 命令 RPOPLPUSH 在一个原子时间内，执行以下两个动作：<br>
     * <LI>将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。<br>
     * <LI>将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。<br>
     * 举个例子，你有两个列表 source 和 destination ， source 列表有元素 a, b, c ， destination
     * 列表有元素 x, y, z ，执行 RPOPLPUSH source destination 之后， source 列表包含元素 a, b ，
     * destination 列表包含元素 c, x, y, z ，并且元素 c 会被返回给客户端。<br>
     * <br>
     * 如果 source 不存在，值 nil 被返回，并且不执行其他动作。<br>
     * <br>
     * 如果 source 和 destination
     * 相同，则列表中的表尾元素被移动到表头，并返回该元素，可以把这种特殊情况视作列表的旋转(rotation)操作。<br>
     * <br>
     * <B>注：涉及到同时操作多个key的批量操作，所以对key值有一定的要求：</B><br>
     * key中必须使用 hash tags 来指定是数据同一类数据，这样redis才会把这一批数据存放在同一个节点上，<BR>
     * 设置规则如：userid1{userid}:u1,userid1{userid}:u2,... 用 {userid} 来指定是同一类数据，<BR>
     * redis只计算从第一次出现{，到第一次出现}的substring的hash值<BR>
     * 
     * @param srckey
     * @param dstkey
     * @return 被弹出的元素，列表中没有数据时返回 null
     */
    String rpoplpush( String srckey, String dstkey );

    /**
     * BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH
     * 一样。<br>
     * 当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或
     * RPUSH 命令为止。<br>
     * 超时参数 timeout 接受一个以秒为单位的数字作为值。超时参数设为 0 表示阻塞时间可以无限期延长(block indefinitely)
     * 。<br>
     * <br>
     * <B>注：涉及到同时操作多个key的批量操作，所以对key值有一定的要求：</B><br>
     * key中必须使用 hash tags 来指定是数据同一类数据，这样redis才会把这一批数据存放在同一个节点上，<BR>
     * 设置规则如：userid1{userid}:u1,userid1{userid}:u2,... 用 {userid} 来指定是同一类数据，<BR>
     * redis只计算从第一次出现{，到第一次出现}的substring的hash值<BR>
     * 
     * @param source
     * @param destination
     * @param timeout
     * @return 假如在指定时间内没有任何元素被弹出，则返回 null。 反之，返回被弹出的元素。
     */
    String brpoplpush( String source, String destination, int timeout );

    /**
     * 将列表 key 下标为 index 的元素的值设置为 value 。<br>
     * <br>
     * 当 index 参数超出范围，或对一个空列表( key 不存在)进行 LSET 时，返回一个错误。<br>
     * 关于列表下标的更多信息，请参考 LINDEX 命令。<br>
     * 
     * @param key
     * @param index
     * @param value
     * @return 操作成功返回 ok ，否则返回错误信息。
     */
    String lset( String key, long index, String value );

    /**
     * 返回列表 key 的长度。<br>
     * <br>
     * 如果 key 不存在，则 key 被解释为一个空列表，返回 0 .<br>
     * 如果 key 不是列表类型，返回一个错误。<br>
     * 
     * @param key
     * @return 列表 key 的长度。
     */
    long llen( String key );

    /**
     * 返回列表 key 中，下标为 index 的元素。<br>
     * <br>
     * 下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1
     * 表示列表的第二个元素，以此类推。<br>
     * 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。<br>
     * 如果 key 不是列表类型，返回一个错误。<br>
     * 
     * @param key
     * @param index
     * @return 列表中下标为 index 的元素。 如果 index 参数的值不在列表的区间范围内(out of range)，返回 nil 。
     */
    String lindex( String key, long index );

    /**
     * 将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。<br>
     * <br>
     * 当 pivot 不存在于列表 key 时，不执行任何操作。<br>
     * 当 key 不存在时， key 被视为空列表，不执行任何操作。<br>
     * 如果 key 不是列表类型，返回一个错误。<br>
     * 
     * @param key
     * @param where
     *            位置 LIST_POSITION.BEFORE（前）, LIST_POSITION.AFTER（后）;
     * @param pivot
     *            列表中的其中一个元素
     * @param value
     *            新插入的元素值
     * @return 如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到 pivot ，返回 -1 。 如果 key
     *         不存在或为空列表，返回 0 。
     */
    long linsert( String key, LIST_POSITION where, String pivot, String value );

    /**
     * 新建一个set集合 <与list类似，但数据不会重复>
     * 
     * @param key
     * @param member
     * @return
     */
    long setHashSet( String key, Set<String> member );

    /**
     * 新建一个set集合，并指定失效时间
     * 
     * @param key
     * @param seconds
     * @param member
     * @return
     */
    long setHashSet( String key, int seconds, Set<String> member );

    /**
     * 获取指定key的Set集合
     * 
     * @param key
     * @return
     */
    Set<String> getMembers( String key );

    /**
     * 删除Set中的指定的元素
     * 
     * @param key
     * @param member
     * @return
     */
    long removeHashSet( String key, String... member );

    /**
     * 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。<BR>
     * 如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该
     * member 在正确的位置上。<BR>
     * score 值可以是整数值或双精度浮点数
     * 
     * @param key
     * @param scoreMembers
     * @return
     */
    long setSortHashSet( String key, Map<String, Double> scoreMembers );

    /**
     * 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。<BR>
     * 如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该
     * member 在正确的位置上。<BR>
     * score 值可以是整数值或双精度浮点数
     * 
     * @param key
     * @param seconds
     *            失效时间，单位：秒
     * @param scoreMembers
     * @return 被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。
     */
    long setSortHashSet( String key, int seconds, Map<String, Double> scoreMembers );

    /**
     * 获取指定索引位置的有序Set集合
     * 
     * @param key
     * @param start
     * @param end
     * @return
     */
    Map<String, Double> getSortHashSet( String key, long start, long end );

    /**
     * 删除SortedSet（有序集合）中的指定的元素
     * 
     * @param key
     * @param member
     * @return
     */
    long removeSortHashSet( String key, String... member );

    /**
     * 得到指定member在集合中的排名
     * 
     * @param key
     * @param member
     * @return 异常：-1
     */
    long rank( String key, String member );

    /**
     * 创建一个Map集合数据
     * 
     * @param key
     * @param map
     * @return String 返回 字符串 “OK” 表示成功，否则为失败
     */
    String setMap( String key, Map<String, String> map );

    /**
     * 创建一个Map集合数据，并设置失效时间
     * 
     * @param key
     * @param seconds
     *            失效时间 ，单位：秒
     * @param map
     * @return String 返回 字符串 “OK” 表示成功，否则为失败
     */
    String setMap( String key, int seconds, Map<String, String> map );

    /**
     * 得到一个map集合
     * 
     * @param key
     * @return
     */
    Map<String, String> getMap( String key );

    /**
     * 得到Map中指定filed的的数据
     * 
     * @param key
     * @param fields
     *            map中的key
     * @return
     */
    Map<String, String> getMapByFields( String key, String... fields );

    /**
     * 删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略
     * 
     * @param key
     * @param field
     * @return 被成功移除的域的数量，不包括被忽略的域。
     */
    long removeMap( String key, String... field );

    /**
     * 设置失效时间，以秒为单位
     * 
     * @param key
     * @param seconds
     *            时长（单位：秒）
     * @return
     */
    boolean expire( String key, int seconds );

    /**
     * 设置失效时间，时间戳的方式
     * 
     * @param key
     * @param unixTime
     *            时间戳 （EXPIREAT cache 1355292000 # 这个 key 将在 2012.12.12 过期）
     * @return
     */
    boolean expireAt( String key, long unixTime );

    /**
     * 存储对象，对象默认会序列化并且压缩
     * 
     * @param key
     * @param value
     * @return String 返回 字符串 “OK” 表示成功，否则为失败
     */
    String setObject( String key, Object value );

    /**
     * 获取对象
     * 
     * @param <T>
     * @param key
     * @param clas
     *            类型
     * @return list
     */
    <T> T getObject( String key, Class<T> clas );

    /**
     * 设置 map对象，Map中的value会执行序列化并且压缩
     * 
     * @param <T>
     * @param key
     * @param value
     * @return String 返回 字符串 “OK” 表示成功，否则为失败
     */
    <T> String setMapObject( String key, Map<String, T> map );

    /**
     * 获取map对象，
     * 
     * @param <T>
     * @param key
     * @return list
     */
    <T> Map<String, T> getMapObject( String key, Class<T> clas );

    /**
     * 存储JSON格式对象， <把对象转换为JSON格式字符串存储>
     * 
     * @param key
     * @param value
     * @return 返回 字符串 “OK” 表示成功，否则为失败
     */
    String setJsonObject( String key, Object value );

    /**
     * 获取JSON格式数据，并转换成指定类型的对象
     * 
     * @param key
     * @param clas
     * @return T
     */
    <T> T getJsonObject( String key, Class<T> clas );

    /**
     * 判断key是否存在
     * 
     * @param key
     * @return 若 key 存在，返回 1 ，否则返回 0 。
     */
    boolean exists( String key );

    /**
     * 删除给定的一个或多个 key 。不存在的 key 会被忽略
     * 
     * @param keys
     * @return 被删除 key 的数量。
     */
    long delKey( String... keys );

    /**
     * 获取指定key值的失效时间，单位为：秒
     * 
     * @param key
     * @return 当 key 不存在时，返回 -2 。<BR>
     *         当 key 存在但没有设置剩余生存时间时，返回 -1 。<BR>
     *         否则，以秒为单位，返回 key 的剩余生存时间。<BR>
     */
    long getKeyTTL( String key );

    /**
     * 查找所有符合给定模式 pattern 的 key KEYS * 匹配数据库中所有 key 。 KEYS h?llo 匹配 hello ，
     * hallo 和 hxllo 等。 KEYS h*llo 匹配 hllo 和 heeeeello 等。 KEYS h[ae]llo 匹配 hello
     * 和 hallo ，但不匹配 hillo 。 特殊符号用 \ 隔开
     * 
     * @return 只返回前100条结果
     */
    Set<String> keys( String pattern );

    /**
     * 查找所有符合给定模式 pattern 的 key KEYS * 匹配数据库中所有 key 。 KEYS h?llo 匹配 hello ，
     * hallo 和 hxllo 等。 KEYS h*llo 匹配 hllo 和 heeeeello 等。 KEYS h[ae]llo 匹配 hello
     * 和 hallo ，但不匹配 hillo 。 特殊符号用 \ 隔开
     * 
     * @return 返回所有匹配的key值
     */
    Set<String> keysAll( String pattern );

    /**
     * 得到key的类型
     * 
     * @param key
     * @return none (key不存在)<br>
     *         string (字符串)<br>
     *         list (列表)<br>
     *         set (集合)<br>
     *         zset (有序集)<br>
     *         hash (哈希表)<br>
     */
    String type( String key );

    /**
     * 指定数值递增 <br>
     * <br>
     * 将 key 中储存的数字值增一。<br>
     * 如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。<br>
     * 如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>
     * 本操作的值限制在 64 位(bit)有符号数字表示之内。<br>
     * 
     * @param key
     * @return 执行 INCR 命令之后 key 的值。
     */
    long incr( String key );

    /**
     * 指定数值递减 <br>
     * <br>
     * 将 key 中储存的数字值减一。<br>
     * 如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。<br>
     * 如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>
     * 本操作的值限制在 64 位(bit)有符号数字表示之内。<br>
     * 
     * @param key
     * @return 执行 DECR 命令之后 key 的值。
     */
    long decr( String key );

    /**
     * 为哈希表 key 中的域 field 的值加上增量 increment 。<br>
     * 增量也可以为负数，相当于对给定域进行减法操作。<br>
     * 如果 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。<br>
     * 如果域 field 不存在，那么在执行命令前，域的值被初始化为 0 。<br>
     * 对一个储存字符串值的域 field 执行 HINCRBY 命令将造成一个错误。<br>
     * 本操作的值被限制在 64 位(bit)有符号数字表示之内<br>
     * 
     * @param key
     * @param field
     * @param value
     *            递增的值，如果传入负数则是相当于递减
     * @return
     */
    long hincrby( String key, String field, long value );

    /**
     * 为有序集 key 的成员 member 的 score 值加上增量 increment 。 <可以通过传递一个负数值 increment ，让
     * score 减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。 当 key
     * 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key
     * increment member 。 当 key 不是有序集类型时，返回一个错误。 score 值可以是整数值或双精度浮点数。>
     * 
     * @param key
     * @param score
     *            递增的值，如果传入负数则是相当于递减
     * @param member
     * @return member成员的新 score 值，以字符串形式表示。
     */
    double zincrby( String key, double score, String member );

    /**
     * 获取集群信息
     * 
     * @return
     */
    List<RedisInfoVO> info();

    /**
     * 清空所有缓存
     */
    void flushDB();

    long getDbSize();

    /**
     * 批量判断KEYS是否存在 <对方法的基本功能进行简单描述> <详细描述方法实现的具体功能，用户需要遵循的约束，采用的特殊算法或者业务逻辑等>
     * 
     * @param keys
     * @return
     */
    Long exists( String[] keys );

    /**
     * 批量set <详细描述方法实现的具体功能，用户需要遵循的约束，采用的特殊算法或者业务逻辑等>
     * 
     * @param mapValues
     * @return
     */
    String mset( Map<String, Object> mapValues );

    /**
     * 批理get,返回的对象类型必须一致 <详细描述方法实现的具体功能，用户需要遵循的约束，采用的特殊算法或者业务逻辑等>
     * 
     * @param clas
     * @param listKey
     * @return
     */
    <T> List<T> mget( Class<T> clas, List<String> listKey );

    /**
     * 实时获取数据库中是否开启缓存标识
     * 
     * @return
     */
    boolean findIsCache();
}
